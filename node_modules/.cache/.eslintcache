[{"/Users/fahimarko/Desktop/mynotes/src/index.js":"1","/Users/fahimarko/Desktop/mynotes/src/App.js":"2","/Users/fahimarko/Desktop/mynotes/src/components/Header.js":"3","/Users/fahimarko/Desktop/mynotes/src/pages/NotesListPage.js":"4","/Users/fahimarko/Desktop/mynotes/src/pages/NotePage.js":"5","/Users/fahimarko/Desktop/mynotes/src/components/AddButton.js":"6","/Users/fahimarko/Desktop/mynotes/src/components/ListItem.js":"7"},{"size":218,"mtime":1663812898049,"results":"8","hashOfConfig":"9"},{"size":570,"mtime":1664749834479,"results":"10","hashOfConfig":"9"},{"size":164,"mtime":1664245547126,"results":"11","hashOfConfig":"9"},{"size":924,"mtime":1664747301381,"results":"12","hashOfConfig":"9"},{"size":2289,"mtime":1664766049948,"results":"13","hashOfConfig":"9"},{"size":301,"mtime":1664311754722,"results":"14","hashOfConfig":"9"},{"size":823,"mtime":1664767873752,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1psxvx4",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/fahimarko/Desktop/mynotes/src/index.js",[],"/Users/fahimarko/Desktop/mynotes/src/App.js",[],"/Users/fahimarko/Desktop/mynotes/src/components/Header.js",[],"/Users/fahimarko/Desktop/mynotes/src/pages/NotesListPage.js",[],"/Users/fahimarko/Desktop/mynotes/src/pages/NotePage.js",["32","33","34"],"\nimport React, { useState, useEffect } from 'react'\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\nimport { Link } from 'react-router-dom'\n\nconst NotePage = ({ match, history }) => {\n\n    let noteId = match.params.id\n    let [note, setNote] = useState(null)\n\n    useEffect(() => {\n        getNote()\n    }, [noteId])\n\n\n    let getNote = async () => {\n        if (noteId === 'new') return\n\n        let response = await fetch(`/api/notes/${noteId}/`)\n        let data = await response.json()\n        setNote(data)\n    }\n\n    let createNote = async () => {\n    fetch(`/api/notes/`, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(note)\n    })\n\n  }\n\n\n\n    let updateNote = async () => {\n        fetch(`/api/notes/${noteId}/`, {\n            method: \"PUT\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(note)\n        })\n    }\n\n\n    let deleteNote = async () => {\n        fetch(`/api/notes/${noteId}/`, {\n            method: 'DELETE',\n            'headers': {\n                'Content-Type': 'application/json'\n            }\n        })\n        history.push('/')\n    }\n\n    let handleSubmit = () => {\n        console.log('NOTE:', note)\n        if (noteId !== 'new' && note.body == '') {\n            deleteNote()\n        } else if (noteId !== 'new') {\n            updateNote()\n        } else if (noteId === 'new' && note.body !== null) {\n            createNote()\n        }\n        history.push('/')\n    }\n\n    let handleChange = (value) => {\n        setNote(note => ({ ...note, 'body': value }))\n        console.log('Handle Change:', note)\n    }\n\n    return (\n        <div className=\"note\" >\n            <div className=\"note-header\">\n                <h3>\n                    <ArrowLeft onClick={handleSubmit} />\n                </h3>\n                {noteId !== 'new' ? (\n                    <button onClick={deleteNote}>Delete</button>\n                ) : (\n                    <button onClick={handleSubmit}>Done</button>\n                )}\n\n            </div>\n            <textarea onChange={(e) => { handleChange(e.target.value) }} value={note?.body}></textarea>\n        </div>\n    )\n}\n\nexport default NotePage\n","/Users/fahimarko/Desktop/mynotes/src/components/AddButton.js",[],"/Users/fahimarko/Desktop/mynotes/src/components/ListItem.js",["35"],"import React from 'react'\nimport { Link } from 'react-router-dom'\n\n  let getTime = (note) => {\n  return new Date(note.updated).toLocaleDateString()\n}\n\n  let getTitle = (note) => {\n\n  let title = note.body.split('\\n')[0]\n  if (title.length > 45) {\n      return title.slice(0, 45)\n  }\n  return title\n}\n\n\n\n  let getContent = (note) => {\n  let title = getTitle(note)\n  let content = note.body.replaceAll('\\n', ' ')\n  content = content.replaceAll(title, '')\n\n  if (content.length > 45) {\n      return content.slice(0, 45) + '...'\n  } else {\n      return content\n  }\n }\n\nconst ListItem = ({ note }) => {\n  return (\n    <Link to={`/note/${note.id}`}>\n      <div className=\"notes-list-item\">\n        <h3>{getTitle(note)}</h3>\n        <p><span>{getTime(note)}</span></p>\n      </div>      \n    </Link>\n  )\n}\n\nexport default ListItem",{"ruleId":"36","severity":1,"message":"37","line":4,"column":10,"nodeType":"38","messageId":"39","endLine":4,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":13,"column":8,"nodeType":"42","endLine":13,"endColumn":16,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":60,"column":43,"nodeType":"46","messageId":"47","endLine":60,"endColumn":45},{"ruleId":"36","severity":1,"message":"48","line":19,"column":7,"nodeType":"38","messageId":"39","endLine":19,"endColumn":17},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNote'. Either include it or remove the dependency array.","ArrayExpression",["49"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'getContent' is assigned a value but never used.",{"desc":"50","fix":"51"},"Update the dependencies array to be: [getNote, noteId]",{"range":"52","text":"53"},[330,338],"[getNote, noteId]"]